{"version":3,"sources":["Settings.tsx","Counter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Settings","props","className","type","onChange","e","onChangeStart","parseInt","currentTarget","value","start","onChangeMax","max","disabled","disableButtonSet","onClick","setSettings","Counter","valueChanged","text","count","disableButtonCount","nextCount","disableButtonReset","resetCount","App","useState","setCount","setStart","setMax","setDisableButtonSet","setDisableButtonCount","setDisableButtonReset","incorrectValue","setIncorrectValue","setValueChanged","newValue","newStartValue","newMaxValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAuCeA,MA1Bf,SAAkBC,GASd,OACI,yBAAKC,UAAU,aACX,qCACI,2BAAOC,KAAK,SACLC,SAXM,SAACC,GACtBJ,EAAMK,cAAcC,SAASF,EAAEG,cAAcC,SAW9BA,MAAOR,EAAMS,SACxB,oCACI,2BAAOP,KAAK,SACLC,SAZI,SAACC,GACpBJ,EAAMU,YAAYJ,SAASF,EAAEG,cAAcC,SAY5BA,MAAOR,EAAMW,OACxB,6BACI,4BAAQC,SAAUZ,EAAMa,iBAAkBC,QAASd,EAAMe,aAAzD,UCIDC,MAvBf,SAAiBhB,GAEb,OACI,yBAAKC,UAAU,aAEPD,EAAMiB,aACAjB,EAAMkB,KACN,6BACE,6BACI,2BAAOhB,KAAK,SAASM,MAAOR,EAAMmB,SAGtC,6BACI,4BAAQP,SAAUZ,EAAMoB,mBAAoBN,QAASd,EAAMqB,WAA3D,KAEA,4BAAQT,SAAUZ,EAAMsB,mBAAoBR,QAASd,EAAMuB,YAA3D,aC0EbC,MAlGf,WAAgB,IAAD,EAEaC,qBAFb,mBAENN,EAFM,KAECO,EAFD,OAGaD,mBAAiB,GAH9B,mBAGNhB,EAHM,KAGCkB,EAHD,OAISF,mBAAiB,GAJ1B,mBAINd,EAJM,KAIDiB,EAJC,OAKmCH,oBAAkB,GALrD,mBAKNZ,EALM,KAKYgB,EALZ,OAMuCJ,oBAAkB,GANzD,mBAMNL,EANM,KAMcU,EANd,OAOuCL,oBAAkB,GAPzD,mBAONH,EAPM,KAOcS,EAPd,OAQ+BN,oBAAkB,GARjD,mBAQNO,EARM,KAQUC,EARV,OAS2BR,oBAAkB,GAT7C,mBASNR,EATM,KASQiB,EATR,KAuEPhB,EAAOc,EACL,yBAAK/B,UAAU,SAAf,mBACA,yBAAKA,UAAU,gBAAf,wCAEN,OAEI,yBAAKA,UAAU,OAEX,kBAAC,EAAD,CAAUI,cA3ClB,SAAuB8B,GACnB,IAAIC,EAAgBD,EACpBR,EAASS,GAELH,GAAkB,GAClBJ,GAAoB,GAKxBK,GAAgB,IAkCFvB,IAAKA,EACLI,YAlBlB,WACIW,EAASjB,GACTyB,GAAgB,GAChBL,GAAoB,GACpBC,GAAsB,GACtBC,GAAsB,IAcRrB,YAhClB,SAAqByB,GACjB,IAAIE,EAAcF,EAClBP,EAAOS,GAEHJ,GAAkB,GAClBJ,GAAoB,GAKxBK,GAAgB,IAuBFrB,iBAAkBA,EAClBJ,MAAOA,IACjB,kBAAC,EAAD,CAASS,KAAMA,EACND,aAAcA,EACdE,MAAOA,EACPC,mBAAoBA,EACpBC,UApEjB,WACQF,EAAQR,GACRe,EAASP,EAAQ,GACrBY,GAAsB,GAClBZ,IAAUR,EAAM,GAChBmB,GAAsB,IAgEbR,mBAAoBA,EACpBC,WA9DjB,WACIG,EAASjB,GACTqB,GAAsB,GACtBC,GAAsB,QCzBVO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.91c232fb.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\nimport './App.css';\n\n\ntype SettingsProps = {\n    onChangeStart: (newValue: number) => void\n    onChangeMax: (newValue: number) => void\n    start: number\n    max: number\n    disableButtonSet: boolean\n    setSettings: () => void\n}\n\nfunction Settings(props: SettingsProps) {\n\n    const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        props.onChangeStart(parseInt(e.currentTarget.value))\n    }\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        props.onChangeMax(parseInt(e.currentTarget.value))\n    }\n\n    return (\n        <div className='container'>\n            <div>start\n                <input type=\"number\"\n                       onChange={changeStartValue}\n                       value={props.start}/></div>\n            <div> max\n                <input type=\"number\"\n                       onChange={changeMaxValue}\n                       value={props.max}/></div>\n            <div>\n                <button disabled={props.disableButtonSet} onClick={props.setSettings}>set</button>\n            </div>\n        </div>\n    );\n}\n\nexport default Settings;\n","import React from 'react';\nimport './App.css';\n\ntype PropsCount = {\n    valueChanged: boolean\n    text:any\n    count: number\n    disableButtonCount:boolean\n    disableButtonReset:boolean\n    nextCount: () => void\n    resetCount: () => void\n\n}\n\nfunction Counter(props: PropsCount) {\n\n    return (\n        <div className='container'>\n            {\n                props.valueChanged\n                    ? props.text\n                    : <div>\n                        <div>\n                            <input type='number' value={props.count}/>\n                        </div>\n\n                        <div>\n                            <button disabled={props.disableButtonCount} onClick={props.nextCount}>+</button>\n\n                            <button disabled={props.disableButtonReset} onClick={props.resetCount}>reset</button>\n                        </div>\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport default Counter;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Settings from \"./Settings\";\nimport Counter from \"./Counter\";\n\nfunction App() {\n\n    let [count, setCount] = useState()\n    let [start, setStart] = useState<number>(0)\n    let [max, setMax] = useState<number>(0)\n    let [disableButtonSet, setDisableButtonSet] = useState<boolean>(true)\n    let [disableButtonCount, setDisableButtonCount] = useState<boolean>(false)\n    let [disableButtonReset, setDisableButtonReset] = useState<boolean>(false)\n    let [incorrectValue, setIncorrectValue] = useState<boolean>(false)\n    let [valueChanged, setValueChanged] = useState<boolean>(true)\n\n\n    const inCorrectValue = () => {\n        setIncorrectValue(true)\n        setDisableButtonSet(true)\n    }\n    const correctValue = () => {\n        setIncorrectValue(true)\n        setDisableButtonSet(true)\n    }\n\n    function nextCount() {\n        if (count < max)\n            setCount(count + 1)\n        setDisableButtonReset(false)\n        if (count === max - 1)\n            setDisableButtonCount(true)\n    }\n\n    function resetCount() {\n        setCount(start)\n        setDisableButtonCount(false)\n        setDisableButtonReset(true)\n\n    }\n\n    function onChangeStart(newValue: number) {\n        let newStartValue = newValue\n        setStart(newStartValue)\n        if (newStartValue < 0 || max <= newStartValue) {\n            setIncorrectValue(true)\n            setDisableButtonSet(true)\n        } else {\n            setIncorrectValue(true)\n            setDisableButtonSet(true)\n        }\n        setValueChanged(true)\n\n    }\n\n    function onChangeMax(newValue: number) {\n        let newMaxValue = newValue\n        setMax(newMaxValue)\n        if (newMaxValue <= 0 || start >= newMaxValue) {\n            setIncorrectValue(true)\n            setDisableButtonSet(true)\n        } else {\n            setIncorrectValue(true)\n            setDisableButtonSet(true)\n        }\n        setValueChanged(true)\n    }\n\n    function setSettings() {\n        setCount(start)\n        setValueChanged(false)\n        setDisableButtonSet(true)\n        setDisableButtonCount(false)\n        setDisableButtonReset(true)\n    }\n\n    let text = incorrectValue\n        ? <div className=\"error\">Incorrect value</div>\n        : <div className=\"changedValue\">Please, change value and press \"SET\"</div>\n\n    return (\n\n        <div className=\"App\">\n\n            <Settings onChangeStart={onChangeStart}\n                      max={max}\n                      setSettings={setSettings}\n                      onChangeMax={onChangeMax}\n                      disableButtonSet={disableButtonSet}\n                      start={start}/>\n            <Counter text={text}\n                     valueChanged={valueChanged}\n                     count={count}\n                     disableButtonCount={disableButtonCount}\n                     nextCount={nextCount}\n                     disableButtonReset={disableButtonReset}\n                     resetCount={resetCount}\n            />\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}